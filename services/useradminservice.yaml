openapi: 3.0.1
info:
  title: will be replaced
  description: This information will be replaced by the SpringFox config information
  version: 0.0.1
paths:
  /useradmin:
    get:
      tags:
        - root-controller
      summary: 'Returns the hal root entry point. [Authorization: Role: user-admin]'
      operationId: getRoot
      responses:
        200:
          description: OK - successfull operation
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/RootDTO'
      security:
        - Bearer: [ ]
  /useradmin/sessions:
    get:
      tags:
        - admin-user-controller
      summary: 'Returns the list of agencies by search query parameter. [Authorization: Role:
      user-admin]'
      operationId: getSessions
      parameters:
        - name: filter
          in: query
          description: 'The filter parameters to search for. If no filter is set all sessions are
          being returned. If more than one filter is set the first given filter is used only.'
          schema:
            $ref: '#/components/schemas/SessionFilter'
        - name: page
          in: query
          description: Number of page where to start in the query (1 = first page)
          required: true
          schema:
            type: integer
        - name: perPage
          in: query
          description: Number of items which are being returned per page
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK - successfull operation
          content:
            'application/hal+json':
              schema:
                $ref: '#/components/schemas/SessionAdminResultDTO'
        400:
          description: BAD REQUEST - invalid/incomplete request or body object
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
  /useradmin/consultant:
    post:
      tags:
        - admin-user-controller
      summary: 'Creates a new consultant [Authorization: Role: consultant-admin]'
      operationId: createConsultant
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateConsultantDTO'
        required: true
      responses:
        201:
          description: CREATED - consultant was created successfully
          content:
            'application/hal+json':
              schema:
                $ref: '#/components/schemas/ConsultantAdminResponseDTO'
        400:
          description: BAD REQUEST - invalid/incomplete request or body object
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
  /useradmin/consultant/{consultantId}:
    get:
      tags:
        - admin-user-controller
      summary: 'Get a consultant by given id [Authorization: Role: consultant-admin]'
      operationId: getConsultant
      parameters:
        - name: consultantId
          in: path
          description: consultant id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK - consultant found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ConsultantAdminResponseDTO'
        204:
          description: NO CONTENT - consultant with the specific id was not found
        400:
          description: BAD REQUEST - invalid/incomplete request
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
    put:
      tags:
        - admin-user-controller
      summary: 'Updates a consultant [Authorization: Role: consultant-admin]'
      operationId: updateConsultant
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateConsultantDTO'
        required: true
      parameters:
        - name: consultantId
          in: path
          description: consultant id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK - consultant was updated successfully
          content:
            'application/hal+json':
              schema:
                $ref: '#/components/schemas/ConsultantAdminResponseDTO'
        400:
          description: BAD REQUEST - invalid/incomplete request
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
    delete:
      tags:
        - admin-user-controller
      summary: 'Mark a consultant for deletion [Authorization: Role: consultant-admin]'
      operationId: markConsultantForDeletion
      parameters:
        - name: consultantId
          in: path
          description: consultant id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK - consultant was marked for deletion successfully
        400:
          description: BAD REQUEST - invalid/incomplete request
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
  /useradmin/consultants:
    get:
      tags:
        - admin-user-controller
      summary: 'Returns the list of consultants by filter query parameter. [Authorization: Role: consultant-admin]'
      operationId: getConsultants
      parameters:
        - name: filter
          in: query
          description: 'The filter parameters to search for. If no filter is set all consultant are
              being returned.'
          schema:
            $ref: '#/components/schemas/ConsultantFilter'
        - name: page
          in: query
          description: Number of page where to start in the query (1 = first page)
          required: true
          schema:
            type: integer
        - name: perPage
          in: query
          description: Number of items which are being returned per page
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK - successfull operation
          content:
            'application/hal+json':
              schema:
                $ref: '#/components/schemas/ConsultantSearchResultDTO'
        400:
          description: BAD REQUEST - invalid/incomplete request or body object
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
  /useradmin/consultingtypes:
    get:
      tags:
        - admin-user-controller
      summary: 'Returns the full list of consulting types [Authorization: Role: agency-admin]'
      operationId: getConsultingTypes
      parameters:
        - name: page
          in: query
          description: Number of page where to start in the query (1 = first page)
          required: true
          schema:
            type: integer
            example: 1
        - name: perPage
          in: query
          description: Number of items which are being returned per page
          required: true
          schema:
            type: integer
            example: 20
      responses:
        200:
          description: OK - successfull operation
          content:
            'application/hal+json':
              schema:
                $ref: '#/components/schemas/ConsultingTypeAdminResultDTO'
        400:
          description: BAD REQUEST - invalid/incomplete request or body object
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
  /useradmin/report:
    get:
      tags:
        - admin-user-controller
      summary: 'Returns an generated report containing data integration violations. [Authorization: Role: user-admin]'
      operationId: generateViolationReport
      responses:
        200:
          description: OK - successfull operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ViolationDTO'
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
  /useradmin/consultant/{consultantId}/agencies:
    get:
      tags:
        - admin-user-controller
      summary: 'Returns the list of consultant-agency connections for a given consultant Id. [Authorization: Role:
        user-admin]'
      operationId: getConsultantAgency
      parameters:
        - name: consultantId
          in: path
          description: Consultant Id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK - successfull operation
          content:
            'application/hal+json':
              schema:
                $ref: '#/components/schemas/ConsultantAgencyAdminResultDTO'
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]

  /useradmin/consultant/{consultantId}/agency:
    post:
      tags:
        - admin-user-controller
      summary: 'Create a consultant-agency relation [Authorization: Role: user-admin]'
      operationId: createConsultantAgency
      parameters:
        - name: consultantId
          in: path
          description: Consultant Id
          required: true
          schema:
            type: string
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateConsultantAgencyDTO'
        required: true
      responses:
        201:
          description: CREATED - consultant-agency relation was created successfully
        400:
          description: BAD REQUEST - invalid/incomplete request
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]

  /useradmin/consultant/{consultantId}/agency/{agencyId}:
    delete:
      tags:
        - admin-user-controller
      summary: 'Delete a consultant-agency relation [Authorization: Role: user-admin]'
      operationId: deleteConsultantAgency
      parameters:
        - name: consultantId
          in: path
          description: Consultant Id
          required: true
          schema:
            type: string
        - name: agencyId
          in: path
          description: Agency Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK - consultant-agency relation was deleted successfully
        400:
          description: BAD REQUEST - invalid/incomplete request
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
  /useradmin/agency/{agencyId}/changetype:
    post:
      tags:
        - admin-user-controller
      summary: 'Change an agency from team-agency to default and vice-versa and switch the
      associated consultant accounts to team consultant or default consultant. Ongoing team
      counselings change to 1:1 when converting agency to default status. 1:1 counselings remain
      single counselings when swapping the agency to team-agency. [Authorization: Role: user-admin]'
      operationId: changeAgencyType
      parameters:
        - name: agencyId
          in: path
          description: Agency Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/AgencyTypeDTO'
      responses:
        200:
          description: OK - assigned consultants were changed successfully
        400:
          description: BAD REQUEST - invalid/incomplete request
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]

components:
  schemas:
    RootDTO:
      type: object
      required:
        - _links
      properties:
        _links:
          $ref: '#/components/schemas/RootLinks'

    RootLinks:
      type: object
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/HalLink'
        sessions:
          $ref: '#/components/schemas/HalLink'
        consultantAgencies:
          $ref: '#/components/schemas/HalLink'
        consultants:
          $ref: '#/components/schemas/HalLink'
        createConsultant:
          $ref: '#/components/schemas/HalLink'

    HalLink:
      type: object
      required:
        - href
      properties:
        href:
          type: string
        method:
          type: string
          enum: [ GET, POST, DELETE, PUT ]
        templated:
          type: boolean

    SessionAdminResultDTO:
      type: object
      properties:
        _embedded:
          type: array
          items:
            $ref: '#/components/schemas/SessionAdminDTO'
        _links:
          $ref: '#/components/schemas/PaginationLinks'

    SessionAdminDTO:
      type: object
      properties:
        userId:
          type: string
          example: "1da238c6-cd46-4162-80f1-bff74eafe77f"
        consultantId:
          type: string
          example: "1da238c6-cd46-4162-80f1-bff74eafe77f"
        username:
          type: string
          example: "enc.OBSXEZTPOJWWC3TDMUWWC43LMVZC2NZS"
        email:
          type: string
          example: "email@beratungcaritas.de"
        consultingType:
          type: integer
          example: 1
        postcode:
          type: string
          example: "12345"
        agencyId:
          type: integer
          example: 1
        isTeamSession:
          type: boolean
        messageDate:
          type: string
        createDate:
          type: string
        updateDate:
          type: string

    PaginationLinks:
      type: object
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/HalLink'
        next:
          $ref: '#/components/schemas/HalLink'
        previous:
          $ref: '#/components/schemas/HalLink'

    ConsultingTypeAdminResultDTO:
      type: object
      properties:
        _embedded:
          type: array
          items:
            $ref: '#/components/schemas/ConsultingTypeResultDTO'
        _links:
          $ref: '#/components/schemas/PaginationLinks'

    ConsultingTypeResultDTO:
      type: object
      properties:
        consultingTypeId:
          type: integer
          format: int32
          example: 2
        name:
          type: string
          example: "schwangerschaftsberatung"
        languageFormal:
          type: boolean
          example: false
        roles:
          $ref: '#/components/schemas/RoleDTO'
        sendWelcomeMessage:
          type: boolean
          example: true
        welcomeMessage:
          type: string
          example: Willkommen bei der Schwangerschaftsberatung
        monitoring:
          type: boolean
          example: true
        feedbackChat:
          type: boolean
          example: true
        notifications:
          $ref: '#/components/schemas/NotificationDTO'

    RoleDTO:
      type: object
      properties:
        consultant:
          $ref: '#/components/schemas/RoleConsultantDTO'

    RoleConsultantDTO:
      type: object
      properties:
        roleNames:
          type: array
          items:
            type: string

    NotificationDTO:
      type: object
      properties:
        newMessage:
          $ref: '#/components/schemas/NewMessageDTO'

    NewMessageDTO:
      type: object
      properties:
        teamSession:
          $ref: '#/components/schemas/TeamSessionDTO'

    TeamSessionDTO:
      type: object
      properties:
        toConsultant:
          $ref: '#/components/schemas/ToConsultantDTO'

    ToConsultantDTO:
      type: object
      properties:
        allTeamConsultants:
          type: boolean
          example: true

    CreateConsultantDTO:
      type: object
      required:
        - username
        - firstname
        - lastname
        - email
        - formalLanguage
        - absent
      properties:
        username:
          type: string
          example: "max.mustermann"
          minLength: 1
          maxLength: 255
        firstname:
          type: string
          example: "Max"
          minLength: 1
          maxLength: 255
        lastname:
          type: string
          example: "Mustermann"
          minLength: 1
          maxLength: 255
        email:
          type: string
          example: "max@mustermann.de"
          minLength: 1
          maxLength: 255
        formalLanguage:
          type: boolean
          example: true
        absent:
          type: boolean
          example: true
        absenceMessage:
          type: string
          example: "I am absent until..."
          minLength: 1
          maxLength: 10000

    UpdateConsultantDTO:
      type: object
      required:
        - firstname
        - lastname
        - email
        - formalLanguage
        - absent
      properties:
        firstname:
          type: string
          example: "Max"
          minLength: 1
          maxLength: 255
        lastname:
          type: string
          example: "Mustermann"
          minLength: 1
          maxLength: 255
        email:
          type: string
          example: "max@mustermann.de"
          minLength: 1
          maxLength: 255
        formalLanguage:
          type: boolean
          example: true
        absent:
          type: boolean
          example: true
        absenceMessage:
          type: string
          example: "I am absent until..."
          minLength: 1
          maxLength: 10000

    ConsultantDTO:
      type: object
      properties:
        id:
          type: string
          example: "0f2cca9c-9303-4791-a0a5-a1ce16f1524f"
        username:
          type: string
          example: "max.mustermann"
        firstname:
          type: string
          example: "Max"
        lastname:
          type: string
          example: "Mustermann"
        email:
          type: string
          example: "max@mustermann.de"
        formalLanguage:
          type: boolean
          example: true
        teamConsultant:
          type: boolean
          example: false
        absent:
          type: boolean
          example: true
        absenceMessage:
          type: string
          example: "I am absent until..."
        createDate:
          type: string
        updateDate:
          type: string
        deleteDate:
          type: string

    ConsultantAdminResponseDTO:
      type: object
      properties:
        _embedded:
          $ref: '#/components/schemas/ConsultantDTO'
        _links:
          $ref: '#/components/schemas/ConsultantLinks'

    ConsultantSearchResultDTO:
      type: object
      properties:
        _embedded:
          type: array
          items:
            $ref: '#/components/schemas/ConsultantAdminResponseDTO'
        _links:
          $ref: '#/components/schemas/PaginationLinks'

    ConsultantLinks:
      type: object
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/HalLink'
        update:
          $ref: '#/components/schemas/HalLink'
        delete:
          $ref: '#/components/schemas/HalLink'
        agencies:
          $ref: '#/components/schemas/HalLink'
        addAgency:
          $ref: '#/components/schemas/HalLink'

    SessionFilter:
      type: object
      properties:
        agency:
          type: integer
        asker:
          type: string
        consultant:
          type: string
        consultingType:
          type: integer

    ConsultantFilter:
      type: object
      properties:
        username:
          type: string
        lastname:
          type: string
        email:
          type: string
        agencyId:
          type: integer
          format: int64
        absent:
          type: boolean

    ConsultantAgencyAdminResultDTO:
      type: object
      properties:
        _embedded:
          type: array
          items:
            $ref: '#/components/schemas/ConsultantAgencyAdminDTO'
        _links:
          $ref: '#/components/schemas/ConsultantAgencyAdminResultLinks'

    ConsultantAgencyAdminResultLinks:
      type: object
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/HalLink'

    ConsultantAgencyAdminDTO:
      type: object
      properties:
        consultantId:
          type: string
          example: "aadc0ecf-c048-4bfc-857d-8c9b2e425500"
        agencyId:
          type: integer
          format: int64
          example: 15
        createDate:
          type: string
          example: "2019-08-23T08:52:05"
        updateDate:
          type: string
          example: "2019-08-23T08:52:05"

    CreateConsultantAgencyDTO:
      type: object
      required:
        - agencyId
        - role
      properties:
        agencyId:
          type: integer
          format: int64
          example: 15
        role:
          type: string
          minLength: 1
          maxLength: 255

    ViolationDTO:
      type: object
      properties:
        violationType:
          type: string
          enum:
            - 'CONSULTANT'
            - 'ASKER'
        identifier:
          type: string
        reason:
          type: string
        additionalInformation:
          type: array
          items:
            $ref: '#/components/schemas/AdditionalInformationDTO'

    AdditionalInformationDTO:
      type: object
      properties:
        name:
          type: string
        value:
          type: string

    AgencyTypeDTO:
      type: object
      required:
        - agencyType
      properties:
        agencyType:
          type: string
          enum:
            - 'TEAM_AGENCY'
            - 'DEFAULT_AGENCY'

  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
